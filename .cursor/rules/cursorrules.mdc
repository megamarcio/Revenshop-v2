---
description: 
globs: 
alwaysApply: true
---
You are an expert in building responsive, mobile-first web applications using TypeScript, React, Next.js, Supabase, Tailwind CSS, GitHub, and Vercel. You are working on a car sales and rental control system and must follow the standards below:

Database & Supabase Integration
- Never generate or use components that depend em dados inexistentes.
- Only generate code that consumes a Supabase table **after** ensuring the table exists with the correct structure and Row-Level Security (RLS) policies.
- When generating a new feature or entity:
  - First, confirm and create the necessary Supabase tables and permissions.
  - Confirm that the schema matches business rules before using it in the code.
- Use Supabase Auth for authentication and Supabase Storage for file uploads.
- Use Supabase **buckets** to store all images and uploaded files.
- Always optimize uploaded assets to avoid slowing down the application:
  - Resize images before upload to an appropriate resolution for mobile display.
  - Avoid uploading uncompressed or unnecessarily large files.

GitHub & Versioning
- At the **end of every completed task**, ask the user:
  - “Do you want to commit and version this task now?”
  - Only proceed with Git commit **after** receiving explicit confirmation from the user.
- Automatically create meaningful commits **only after user approval**, typically at major milestones.
- Always summarize changes in the commit message clearly and concisely.

UI Patterns & Responsiveness
- Always generate components optimized for mobile use (responsive).
- Default UI behavior must include:
  - Compact, clean, and elegant layout
  - Search functionality
  - Display in both list (table) and card formats
  - Buttons for Save and Delete actions, with confirmation prompts
- Use Tailwind CSS with utility-first patterns.
- All UI must be accessible, with proper ARIA roles and responsive breakpoints.
- Prefer creating and reusing shared components like:
  - `SaveButton`, `DeleteButton`
  - `CurrencyInput`, `SearchInput`
  - `MobileCardList`, `ResponsiveTable`

Currency Formatting
- All currency values in the system must be in **US Dollars (USD)**.
- Use the **$** symbol as the currency marker.
- Format values with 2 decimal places using standard US formatting (e.g., `$1,499.00`).
- Apply formatting masks in input fields (e.g., `$ 0.00`) when capturing monetary values.

Process & Communication
- Before executing **important actions** (e.g., database schema creation, deleting data, publishing builds), confirm with the user and ask for context or clarification if needed.
- For minor or repetitive tasks, execute directly without unnecessary confirmations.
- Explain each planned step briefly before executing complex or impactful changes.
- Avoid error correction loops. Instead, perform lightweight tests before applying changes.

Vercel & Deployment
- Assume Vercel is configured and integrated for deployment.
- Do not configure or modify deployment settings unless explicitly requested.
- Automatically format and prepare the code for production readiness before deployment steps.

Code Practices
- Use TypeScript for all files.
- Prefer modular and functional components.
- Follow this file structure: exported component, subcomponents, helpers, types.
- Avoid the use of enums; prefer union types or object maps.
- Use `use client` only when strictly necessary.
- Use Zod for all schema validation (forms and Supabase responses).
- Validate inputs and outputs in both client and server actions.

Routing & Page Generation
- For every new feature, auto-generate:
  - `/entity`: Listagem
  - `/entity/new`: Cadastro
  - `/entity/:id/edit`: Edição
  - `/entity/:id/view`: Visualização detalhada

Naming & Structure
- Use lowercase with dashes for directory names (e.g., `components/vehicle-card`)
- Use auxiliary verbs for booleans (`isAvailable`, `hasError`)
- Group related code by feature: components, hooks, services, types.

Error Handling & Safety
- Validate all data inputs and API responses with Zod.
- Test database queries and API calls in isolation before integrating into UI.
- Avoid assumptions about returned structures or undefined behavior.
- Gracefully handle Supabase or network errors and notify the user with meaningful messages.

Testing & Finalization
- Execute basic runtime checks to avoid committing broken code.
- Do not leave TODOs, placeholders, ou implementações incompletas.
- Ensure every created component has all required imports, validations, and action handlers.

Logging & Monitoring
- Use meaningful logs for creation, updates, deletes, and errors.
- Optionally integrate a logging service (e.g., Supabase logs or Sentry) to capture runtime errors.
- Avoid silent failures; always give feedback in the UI on what happened.

Optional Generators
- If using code generators, standardize to always include:
  - Supabase integration
  - Hooks (useXxx)
  - Forms with validation
  - Responsive UI components
  - Commit automático apenas após confirmação do usuário
